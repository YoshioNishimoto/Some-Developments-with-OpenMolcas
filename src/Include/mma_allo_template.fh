!***********************************************************************
! This file is part of OpenMolcas.                                     *
!                                                                      *
! OpenMolcas is free software; you can redistribute it and/or modify   *
! it under the terms of the GNU Lesser General Public License, v. 2.1. *
! OpenMolcas is distributed in the hope that it will be useful, but it *
! is provided "as is" and without any express or implied warranties.   *
! For more details see the full text of the license in the file        *
! LICENSE or in <http://www.gnu.org/licenses/>.                        *
!                                                                      *
! Copyright (C) 2014-2016, Steven Vancoillie                           *
!               2015,2020,2022, Ignacio Fdez. Galvan                   *
!***********************************************************************

! Given _SUBR_NAME_, and _DIMENSIONS_, this defines:
!   [_SUBR_NAME_]_allo_[_DIMENSIONS_]D
!   [_SUBR_NAME_]_allo_[_DIMENSIONS_]D_lim
!   [_SUBR_NAME_]_free_[_DIMENSIONS_]D

! Note _DIMENSIONS_=0 is intended for deferred-length character strings

#define PASTE(a) a
#define CAT(a,b) PASTE(a)b

#ifdef _DATA_NAME_
#  define _DN_ _DATA_NAME_
#  define _SIZE_ ntot
#else
#  define _DN_ 'CHAR'
#  define _SIZE_ bufsize
#endif

#ifdef _IS_POINTER_
#define _MMA_ATTR_ pointer
#define _MMA_FUNC_ associated
#else
#define _MMA_ATTR_ allocatable
#define _MMA_FUNC_ allocated
#endif

#ifdef _NO_GARBLE_
#define _KEY_ 'RGSTN'
#else
#define _KEY_ 'RGST'
#endif

! NAME_allo_xD definition

#define _ALLO_NAME_ CAT(CAT(_SUBR_NAME_,_allo),CAT(_,CAT(_DIMENSIONS_,D)))

#if _DIMENSIONS_==0
      subroutine _ALLO_NAME_(buffer,n0,label)
#elif _DIMENSIONS_==1
      subroutine _ALLO_NAME_(buffer,n1,label)
#elif _DIMENSIONS_==2
      subroutine _ALLO_NAME_(buffer,n1,n2,label)
#elif _DIMENSIONS_==3
      subroutine _ALLO_NAME_(buffer,n1,n2,n3,label)
#elif _DIMENSIONS_==4
      subroutine _ALLO_NAME_(buffer,n1,n2,n3,n4,label)
#elif _DIMENSIONS_==5
      subroutine _ALLO_NAME_(buffer,n1,n2,n3,n4,n5,label)
#elif _DIMENSIONS_==7
      subroutine _ALLO_NAME_(buffer,n1,n2,n3,n4,n5,n6,n7,label)
#endif
        implicit none
#if _DIMENSIONS_==0
        _TYPE_, _MMA_ATTR_, intent(inout) :: buffer
        integer, intent(in) :: n0
#elif _DIMENSIONS_==1
        _TYPE_, _MMA_ATTR_, intent(inout) :: buffer(:)
        integer, intent(in) :: n1
#elif _DIMENSIONS_==2
        _TYPE_, _MMA_ATTR_, intent(inout) :: buffer(:,:)
        integer, intent(in) :: n1,n2
#elif _DIMENSIONS_==3
        _TYPE_, _MMA_ATTR_, intent(inout) :: buffer(:,:,:)
        integer, intent(in) :: n1,n2,n3
#elif _DIMENSIONS_==4
        _TYPE_, _MMA_ATTR_, intent(inout) :: buffer(:,:,:,:)
        integer, intent(in) :: n1,n2,n3,n4
#elif _DIMENSIONS_==5
        _TYPE_, _MMA_ATTR_, intent(inout) :: buffer(:,:,:,:,:)
        integer, intent(in) :: n1,n2,n3,n4,n5
#elif _DIMENSIONS_==7
        _TYPE_, _MMA_ATTR_, intent(inout) :: buffer(:,:,:,:,:,:,:)
        integer, intent(in) :: n1,n2,n3,n4,n5,n6,n7
#endif
        character(len=*), optional, intent(in) :: label
#include "cptr2loff.fh"
        integer :: ntot,mma_avail,bufsize,loffset
        if (_MMA_FUNC_(buffer)) then
          if (present(label)) then
            call mma_double_allo(label)
          else
            call mma_double_allo(_DEF_LABEL_)
          end if
        end if
        call mma_maxbytes(mma_avail)
#if _DIMENSIONS_==0
        ntot = n0
#elif _DIMENSIONS_==1
        ntot = n1
#elif _DIMENSIONS_==2
        ntot = n1*n2
#elif _DIMENSIONS_==3
        ntot = n1*n2*n3
#elif _DIMENSIONS_==4
        ntot = n1*n2*n3*n4
#elif _DIMENSIONS_==5
        ntot = n1*n2*n3*n4*n5
#elif _DIMENSIONS_==7
        ntot = n1*n2*n3*n4*n5*n6*n7
#endif
#if _DIMENSIONS_==0
!       we can't use storage_size(buffer) for an unallocated character(len=:)
        bufsize = (storage_size('a') * ntot - 1) / 8 + 1
#else
        bufsize = (storage_size(buffer) * ntot - 1) / 8 + 1
#endif
        if (bufsize .gt. mma_avail) then
          call mma_oom(label,bufsize,mma_avail)
        else
#if _DIMENSIONS_==0
          if (n0 .eq. 0) call abend()
          allocate(character(len=n0) :: buffer)
#elif _DIMENSIONS_==1
          allocate(buffer(n1))
#elif _DIMENSIONS_==2
          allocate(buffer(n1,n2))
#elif _DIMENSIONS_==3
          allocate(buffer(n1,n2,n3))
#elif _DIMENSIONS_==4
          allocate(buffer(n1,n2,n3,n4))
#elif _DIMENSIONS_==5
          allocate(buffer(n1,n2,n3,n4,n5))
#elif _DIMENSIONS_==7
          allocate(buffer(n1,n2,n3,n4,n5,n6,n7))
#endif
          if (ntot.gt.0) then
#if _DIMENSIONS_==0
            loffset = cptr2loff(buffer)
#elif _DIMENSIONS_==1
            loffset = cptr2loff(buffer(1))
#elif _DIMENSIONS_==2
            loffset = cptr2loff(buffer(1,1))
#elif _DIMENSIONS_==3
            loffset = cptr2loff(buffer(1,1,1))
#elif _DIMENSIONS_==4
            loffset = cptr2loff(buffer(1,1,1,1))
#elif _DIMENSIONS_==5
            loffset = cptr2loff(buffer(1,1,1,1,1))
#elif _DIMENSIONS_==7
            loffset = cptr2loff(buffer(1,1,1,1,1,1,1))
#endif
            if (present(label)) then
              call getmem(label,_KEY_,_DN_,loffset,_SIZE_)
            else
              call getmem(_DEF_LABEL_,_KEY_,_DN_,loffset,_SIZE_)
            end if
          end if
        end if
      end subroutine _ALLO_NAME_

! NAME_allo_xD_lim definition

#if _DIMENSIONS_ > 0

#define _ALLO_NAME_LIM_ CAT(_ALLO_NAME_,_lim)

#if _DIMENSIONS_==1
      subroutine _ALLO_NAME_LIM_(buffer,l1,label)
#elif _DIMENSIONS_==2
      subroutine _ALLO_NAME_LIM_(buffer,l1,l2,label)
#elif _DIMENSIONS_==3
      subroutine _ALLO_NAME_LIM_(buffer,l1,l2,l3,label)
#elif _DIMENSIONS_==4
      subroutine _ALLO_NAME_LIM_(buffer,l1,l2,l3,l4,label)
#elif _DIMENSIONS_==5
      subroutine _ALLO_NAME_LIM_(buffer,l1,l2,l3,l4,l5,label)
#elif _DIMENSIONS_==7
      subroutine _ALLO_NAME_LIM_(buffer,l1,l2,l3,l4,l5,l6,l7,label)
#endif
        implicit none
#if _DIMENSIONS_==1
        _TYPE_, _MMA_ATTR_, intent(inout) :: buffer(:)
        integer, intent(in) :: l1(2)
#elif _DIMENSIONS_==2
        _TYPE_, _MMA_ATTR_, intent(inout) :: buffer(:,:)
        integer, intent(in) :: l1(2),l2(2)
#elif _DIMENSIONS_==3
        _TYPE_, _MMA_ATTR_, intent(inout) :: buffer(:,:,:)
        integer, intent(in) :: l1(2),l2(2),l3(2)
#elif _DIMENSIONS_==4
        _TYPE_, _MMA_ATTR_, intent(inout) :: buffer(:,:,:,:)
        integer, intent(in) :: l1(2),l2(2),l3(2),l4(2)
#elif _DIMENSIONS_==5
        _TYPE_, _MMA_ATTR_, intent(inout) :: buffer(:,:,:,:,:)
        integer, intent(in) :: l1(2),l2(2),l3(2),l4(2),l5(2)
#elif _DIMENSIONS_==7
        _TYPE_, _MMA_ATTR_, intent(inout) :: buffer(:,:,:,:,:,:,:)
        integer, intent(in) :: l1(2),l2(2),l3(2),l4(2),l5(2),l6(2),l7(2)
#endif
        character(len=*), optional, intent(in) :: label
#include "cptr2loff.fh"
        integer :: ntot,mma_avail,bufsize,loffset
        if (_MMA_FUNC_(buffer)) then
          if (present(label)) then
            call mma_double_allo(label)
          else
            call mma_double_allo(_DEF_LABEL_)
          end if
        end if
        call mma_maxbytes(mma_avail)
#if _DIMENSIONS_==1
        ntot = l1(2)-l1(1)+1
#elif _DIMENSIONS_==2
        ntot = (l1(2)-l1(1)+1) * (l2(2)-l2(1)+1)
#elif _DIMENSIONS_==3
        ntot = (l1(2)-l1(1)+1) * (l2(2)-l2(1)+1) * (l3(2)-l3(1)+1)
#elif _DIMENSIONS_==4
        ntot = (l1(2)-l1(1)+1) * (l2(2)-l2(1)+1) * (l3(2)-l3(1)+1) *    &
     &         (l4(2)-l4(1)+1)
#elif _DIMENSIONS_==5
        ntot = (l1(2)-l1(1)+1) * (l2(2)-l2(1)+1) * (l3(2)-l3(1)+1) *    &
     &         (l4(2)-l4(1)+1) * (l5(2)-l5(1)+1)
#elif _DIMENSIONS_==7
        ntot = (l1(2)-l1(1)+1) * (l2(2)-l2(1)+1) * (l3(2)-l3(1)+1) *    &
     &         (l4(2)-l4(1)+1) * (l5(2)-l5(1)+1) * (l6(2)-l6(1)+1) *    &
     &         (l7(2)-l7(1)+1)
#endif
        bufsize = (storage_size(buffer) * ntot - 1) / 8 + 1
        if (bufsize .gt. mma_avail) then
          call mma_oom(label,bufsize,mma_avail)
        else
#if _DIMENSIONS_==1
          allocate(buffer(l1(1):l1(2)))
#elif _DIMENSIONS_==2
          allocate(buffer(l1(1):l1(2),l2(1):l2(2)))
#elif _DIMENSIONS_==3
          allocate(buffer(l1(1):l1(2),l2(1):l2(2),l3(1):l3(2)))
#elif _DIMENSIONS_==4
          allocate(buffer(l1(1):l1(2),l2(1):l2(2),l3(1):l3(2),          &
     &                    l4(1):l4(2)))
#elif _DIMENSIONS_==5
          allocate(buffer(l1(1):l1(2),l2(1):l2(2),l3(1):l3(2),          &
     &                    l4(1):l4(2),l5(1):l5(2)))
#elif _DIMENSIONS_==7
          allocate(buffer(l1(1):l1(2),l2(1):l2(2),l3(1):l3(2),          &
     &                    l4(1):l4(2),l5(1):l5(2),l6(1):l6(2),          &
     &                    l7(1):l7(2)))
#endif
          if (ntot.gt.0) then
#if _DIMENSIONS_==1
            loffset = cptr2loff(buffer(l1(1)))
#elif _DIMENSIONS_==2
            loffset = cptr2loff(buffer(l1(1),l2(1)))
#elif _DIMENSIONS_==3
            loffset = cptr2loff(buffer(l1(1),l2(1),l3(1)))
#elif _DIMENSIONS_==4
            loffset = cptr2loff(buffer(l1(1),l2(1),l3(1),l4(1)))
#elif _DIMENSIONS_==5
            loffset = cptr2loff(buffer(l1(1),l2(1),l3(1),l4(1),l5(1)))
#elif _DIMENSIONS_==7
            loffset = cptr2loff(buffer(l1(1),l2(1),l3(1),l4(1),l5(1),   &
     &                                 l6(1),l7(1)))
#endif
            if (present(label)) then
              call getmem(label,_KEY_,_DN_,loffset,_SIZE_)
            else
              call getmem(_DEF_LABEL_,_KEY_,_DN_,loffset,_SIZE_)
            end if
          end if
        end if
      end subroutine _ALLO_NAME_LIM_

#endif

! NAME_free_xD definition

#define _FREE_NAME_ CAT(CAT(_SUBR_NAME_,_free),CAT(_,CAT(_DIMENSIONS_,D)))

      subroutine _FREE_NAME_(buffer)
        implicit none
#if _DIMENSIONS_==0
        _TYPE_, _MMA_ATTR_, intent(inout) :: buffer
#elif _DIMENSIONS_==1
        _TYPE_, _MMA_ATTR_, intent(inout) :: buffer(:)
#elif _DIMENSIONS_==2
        _TYPE_, _MMA_ATTR_, intent(inout) :: buffer(:,:)
#elif _DIMENSIONS_==3
        _TYPE_, _MMA_ATTR_, intent(inout) :: buffer(:,:,:)
#elif _DIMENSIONS_==4
        _TYPE_, _MMA_ATTR_, intent(inout) :: buffer(:,:,:,:)
#elif _DIMENSIONS_==5
        _TYPE_, _MMA_ATTR_, intent(inout) :: buffer(:,:,:,:,:)
#elif _DIMENSIONS_==7
        _TYPE_, _MMA_ATTR_, intent(inout) :: buffer(:,:,:,:,:,:,:)
#endif
#include "cptr2loff.fh"
        integer :: ntot,loffset
#ifndef _DATA_NAME_
        integer :: bufsize
#endif
#if _DIMENSIONS_==0
        ntot = 1
#else
        ntot = size(buffer)
#endif
#ifndef _DATA_NAME_
        bufsize = (storage_size(buffer) * ntot - 1) / 8 + 1
#endif
        if (_MMA_FUNC_(buffer)) then
          if (ntot.gt.0) then
#if _DIMENSIONS_==0
            loffset = cptr2loff(buffer)
#elif _DIMENSIONS_==1
            loffset = cptr2loff(buffer(lbound(buffer,1)))
#elif _DIMENSIONS_==2
            loffset = cptr2loff(buffer(lbound(buffer,1),                &
     &                                 lbound(buffer,2)))
#elif _DIMENSIONS_==3
            loffset = cptr2loff(buffer(lbound(buffer,1),                &
     &                                 lbound(buffer,2),                &
     &                                 lbound(buffer,3)))
#elif _DIMENSIONS_==4
            loffset = cptr2loff(buffer(lbound(buffer,1),                &
     &                                 lbound(buffer,2),                &
     &                                 lbound(buffer,3),                &
     &                                 lbound(buffer,4)))
#elif _DIMENSIONS_==5
            loffset = cptr2loff(buffer(lbound(buffer,1),                &
     &                                 lbound(buffer,2),                &
     &                                 lbound(buffer,3),                &
     &                                 lbound(buffer,4),                &
     &                                 lbound(buffer,5)))
#elif _DIMENSIONS_==7
            loffset = cptr2loff(buffer(lbound(buffer,1),                &
     &                                 lbound(buffer,2),                &
     &                                 lbound(buffer,3),                &
     &                                 lbound(buffer,4),                &
     &                                 lbound(buffer,5),                &
     &                                 lbound(buffer,6),                &
     &                                 lbound(buffer,7)))
#endif
            call getmem(_DEF_LABEL_,'EXCL',_DN_,loffset,_SIZE_)
          end if
          deallocate(buffer)
#ifdef _IS_POINTER_
          nullify(buffer)
#endif
        else
          call mma_double_free(_DEF_LABEL_)
        end if
      end subroutine _FREE_NAME_

#undef _SIZE_
#undef _DN_
#undef _MMA_ATTR_
#undef _MMA_FUNC_
#undef _KEY_
#undef _ALLO_NAME_
#undef _ALLO_NAME_LIM_
#undef _FREE_NAME_

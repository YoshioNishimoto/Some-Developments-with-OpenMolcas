*-------------------------------------------------------------------------------
* Molecule: H2O, N2
* Basis: None, STO-3G
* Symmetry: C1
* Features tested: FALSE
* Responsible person: I. Fdez. GalvÃ¡n
* Comments: Geometry optimization with external program
*-------------------------------------------------------------------------------
&GATEWAY
  * Just one s function to keep GATEWAY happy
  Coord = 3

    O.ANO-S...1s  0.000000  0.000000  1.570000
    H.ANO-S...0s -1.470000  0.000000 -1.260000
    H.ANO-S...0s  1.470000  0.000000 -1.260000
  Group = NoSym
>>> DoWhile
&SEWARD
  OneOnly
&FALSE
  RUN = python3 LJ.py
  MODE = replace
&SLAPAF
>>> EndDo

&GATEWAY
  Coord = 2

    F  0.000000  0.000000 -1.000000
    F  0.000000  0.000000  1.000000
  Basis = STO-3G
  Group = NoSym
>>> DoWhile
&SEWARD
&SCF
&ALASKA
&FALSE
  RUN = python3 LJ.py
  MODE = add
&SLAPAF
  NoLast
>>> EndDo

>>> FILE LJ.py
# This script computes energies and gradients for a Lennard-Jones model
import sys
import math

infile = sys.argv[1]
outfile = sys.argv[2]

angstrom = 1.88972612462
kcalmol = 0.00159360143764

# ====================================
# From UFF  doi: 10.1021/ja00051a040
#        D_i             x_i
params = {
  'H':  [2.886*angstrom, 0.044*kcalmol],
  'HE': [2.362*angstrom, 0.056*kcalmol],
  'LI': [2.452*angstrom, 0.025*kcalmol],
  'BE': [2.745*angstrom, 0.085*kcalmol],
  'B':  [4.083*angstrom, 0.180*kcalmol],
  'C':  [3.851*angstrom, 0.105*kcalmol],
  'N':  [3.660*angstrom, 0.069*kcalmol],
  'O':  [3.500*angstrom, 0.060*kcalmol],
  'F':  [3.364*angstrom, 0.050*kcalmol],
  'NE': [3.243*angstrom, 0.042*kcalmol],
  'NA': [2.983*angstrom, 0.030*kcalmol],
  'MG': [3.021*angstrom, 0.111*kcalmol],
  'AL': [4.499*angstrom, 0.505*kcalmol],
  'SI': [4.295*angstrom, 0.402*kcalmol],
  'P':  [4.147*angstrom, 0.305*kcalmol],
  'S':  [4.035*angstrom, 0.274*kcalmol],
  'CL': [3.947*angstrom, 0.227*kcalmol],
  'AR': [3.868*angstrom, 0.185*kcalmol],
}

def LJ_grad(i, j):
  n_i = names[i]
  n_j = names[j]
  x_i = params[n_i][0]
  x_j = params[n_j][0]
  D_i = params[n_i][1]
  D_j = params[n_j][1]
  x_ij = (x_i+x_j)/2
  D_ij = math.sqrt(D_i*D_j)
  d = [b-a for a,b in zip(geo[i],geo[j])]
  r2 = sum([a**2 for a in d])
  x6 = x_ij**6/r2**3
  x12 = x6**2
  E = D_ij*(x12-2*x6)
  g = D_ij*(x6-x12)*12/r2
  vg = [-g*a for a in d]
  return E, vg
# ====================================

# Read input geometry
names = []
geo = []
with open(infile, 'r') as f:
  for line in f:
    if line.startswith('[XYZ]'):
      nAtoms = int(f.readline())
      f.readline()
      for i in range(nAtoms):
        l = f.readline().split()
        names.append(l[0].upper())
        geo.append([float(x)*angstrom for x in l[1:4]])

# Compute energy and gradient
E = 0
grad = [[0.0, 0.0, 0.0]] * nAtoms
for i in range(nAtoms):
  for j in range(i+1, nAtoms):
    E_ij, g_ij = LJ_grad(i,j)
    E += E_ij
    grad[i] = [a+b for a,b in zip(grad[i],g_ij)]
    grad[j] = [a-b for a,b in zip(grad[j],g_ij)]

# Write output
with open(outfile, 'w') as f:
  f.write('[ROOTS]\n')
  f.write('1\n')
  f.write('\n')
  f.write('[ENERGIES]\n')
  f.write(f'{E}\n')
  f.write('\n')
  f.write('[GRADIENT]\n')
  f.write('1\n')
  for i in range(nAtoms):
    f.write(f'{grad[i][0]} {grad[i][1]} {grad[i][2]}\n')
>>> EOF
>>FILE checkfile
* This file is autogenerated:
* Molcas version 21.06-99-g4cf1c779e
* Linux otis 4.15.0-1073-oem #83-Ubuntu SMP Mon Feb 17 11:21:18 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
* Sat Jul 24 12:58:54 2021
*
#>>   1
#> POTNUC="2.834994596923"/12
#>>   2
#> POTNUC="2.834994596923"/6
#> SEWARD_MLTPL1X="0.0"/5
#> SEWARD_KINETIC="29.213922007819"/5
#> SEWARD_ATTRACT="-61.469169354568"/5
#>>   3
#>>   4
#>>   6
#> POTNUC="2.834913360804"/6
#> SEWARD_MLTPL1X="0.0"/5
#> SEWARD_KINETIC="29.213922007819"/5
#> SEWARD_ATTRACT="-61.469101298121"/5
#>>   7
#>>   8
#>>  10
#> POTNUC="2.834870679727"/6
#> SEWARD_MLTPL1X="0.0"/5
#> SEWARD_KINETIC="29.213922007819"/5
#> SEWARD_ATTRACT="-61.469044546257"/5
#>>  11
#>>  12
#>>  14
#> POTNUC="2.834854095398"/6
#> SEWARD_MLTPL1X="0.0"/5
#> SEWARD_KINETIC="29.213922007819"/5
#> SEWARD_ATTRACT="-61.468997182160"/5
#>>  15
#>>  16
#>>  18
#> POTNUC="2.834854434053"/6
#> SEWARD_MLTPL1X="0.0"/5
#> SEWARD_KINETIC="29.213922007819"/5
#> SEWARD_ATTRACT="-61.468957625822"/5
#>>  19
#>>  20
#>>  22
#> POTNUC="2.834865092174"/6
#> SEWARD_MLTPL1X="0.0"/5
#> SEWARD_KINETIC="29.213922007819"/5
#> SEWARD_ATTRACT="-61.468924571312"/5
#>>  23
#>>  24
#>>  26
#> POTNUC="2.834881440267"/6
#> SEWARD_MLTPL1X="0.0"/5
#> SEWARD_KINETIC="29.213922007819"/5
#> SEWARD_ATTRACT="-61.468896936785"/5
#>>  27
#>>  28
#>>  30
#> POTNUC="2.834900333934"/6
#> SEWARD_MLTPL1X="0.0"/5
#> SEWARD_KINETIC="29.213922007819"/5
#> SEWARD_ATTRACT="-61.468873824341"/5
#>>  31
#>>  32
#>>  34
#> POTNUC="2.834919721344"/6
#> SEWARD_MLTPL1X="0.0"/5
#> SEWARD_KINETIC="29.213922007819"/5
#> SEWARD_ATTRACT="-61.468854487569"/5
#>>  35
#>>  36
#>>  38
#> POTNUC="2.834938335243"/6
#> SEWARD_MLTPL1X="0.0"/5
#> SEWARD_KINETIC="29.213922007819"/5
#> SEWARD_ATTRACT="-61.468838305176"/5
#>>  39
#>>  40
#>>  42
#> POTNUC="2.834955456933"/6
#> SEWARD_MLTPL1X="0.0"/5
#> SEWARD_KINETIC="29.213922007819"/5
#> SEWARD_ATTRACT="-61.468824759442"/5
#>>  43
#>>  44
#>>  46
#> POTNUC="2.834970739648"/6
#> SEWARD_MLTPL1X="0.0"/5
#> SEWARD_KINETIC="29.213922007819"/5
#> SEWARD_ATTRACT="-61.468813418556"/5
#>>  47
#>>  48
#> GEO_ITER="12"/8
#> POTNUC="2.834984079515"/6
#> SEWARD_MLTPL1X="0.0"/5
#> SEWARD_KINETIC="29.213922007819"/5
#> SEWARD_ATTRACT="-61.468803922085"/5
#>>  49
#>>  51
#> POTNUC="21.431677041571"/6
#>>  52
#> POTNUC="21.431677041571"/6
#> SEWARD_MLTPL1X="0.0"/5
#> SEWARD_KINETIC="36.984576824096"/5
#> SEWARD_ATTRACT="-79.390877202995"/5
#>>  53
#> SCF_ITER="5"/8
#> E_SCF="-195.731098298497"/8
#> MLTPL__0="0.0"/5
#> MLTPL__1[0]="0.0"/5
#> MLTPL__1[1]="0.0"/5
#> MLTPL__1[2]="-0.000000000000"/5
#> MLTPL__2[0]="-0.352945522712"/5
#> MLTPL__2[1]="0.0"/5
#> MLTPL__2[2]="0.0"/5
#> MLTPL__2[3]="-0.352945522712"/5
#> MLTPL__2[4]="0.0"/5
#> MLTPL__2[5]="0.705891045424"/5
#>>  54
#> GRAD[0]="0.0"/6
#> GRAD[1]="0.0"/6
#> GRAD[2]="-0.181189509766"/6
#> GRAD[3]="0.0"/6
#> GRAD[4]="0.0"/6
#> GRAD[5]="0.181189509766"/6
#>>  55
#>>  56
#>>  58
#> POTNUC="23.279526193386"/6
#> SEWARD_MLTPL1X="0.0"/5
#> SEWARD_KINETIC="36.984576824096"/5
#> SEWARD_ATTRACT="-79.596193775419"/5
#>>  59
#> SCF_ITER="5"/8
#> E_SCF="-195.790817806715"/8
#> MLTPL__0="0.0"/5
#> MLTPL__1[0]="0.0"/5
#> MLTPL__1[1]="0.0"/5
#> MLTPL__1[2]="0.000000000000"/5
#> MLTPL__2[0]="-0.312321887832"/5
#> MLTPL__2[1]="0.0"/5
#> MLTPL__2[2]="0.0"/5
#> MLTPL__2[3]="-0.312321887832"/5
#> MLTPL__2[4]="0.0"/5
#> MLTPL__2[5]="0.624643775663"/5
#>>  60
#> GRAD[0]="0.0"/6
#> GRAD[1]="0.0"/6
#> GRAD[2]="-0.215789144601"/6
#> GRAD[3]="0.0"/6
#> GRAD[4]="0.0"/6
#> GRAD[5]="0.215789144601"/6
#>>  61
#>>  62
#>>  64
#> POTNUC="22.204892658674"/6
#> SEWARD_MLTPL1X="0.0"/5
#> SEWARD_KINETIC="36.984576824096"/5
#> SEWARD_ATTRACT="-79.476790049340"/5
#>>  65
#> SCF_ITER="5"/8
#> E_SCF="-195.756006822962"/8
#> MLTPL__0="0.0"/5
#> MLTPL__1[0]="0.0"/5
#> MLTPL__1[1]="0.0"/5
#> MLTPL__1[2]="-0.000000000000"/5
#> MLTPL__2[0]="-0.337433192374"/5
#> MLTPL__2[1]="0.0"/5
#> MLTPL__2[2]="0.0"/5
#> MLTPL__2[3]="-0.337433192374"/5
#> MLTPL__2[4]="0.0"/5
#> MLTPL__2[5]="0.674866384747"/5
#>>  66
#> GRAD[0]="0.0"/6
#> GRAD[1]="0.0"/6
#> GRAD[2]="-0.197192756203"/6
#> GRAD[3]="0.0"/6
#> GRAD[4]="0.0"/6
#> GRAD[5]="0.197192756203"/6
#>>  67
#>>  68
#>>  70
#> POTNUC="22.192811725266"/6
#> SEWARD_MLTPL1X="0.0"/5
#> SEWARD_KINETIC="36.984576824096"/5
#> SEWARD_ATTRACT="-79.475447723406"/5
#>>  71
#> SCF_ITER="3"/8
#> E_SCF="-195.755615480166"/8
#> MLTPL__0="0.0"/5
#> MLTPL__1[0]="0.0"/5
#> MLTPL__1[1]="0.0"/5
#> MLTPL__1[2]="0.000000000000"/5
#> MLTPL__2[0]="-0.337692327966"/5
#> MLTPL__2[1]="0.0"/5
#> MLTPL__2[2]="0.0"/5
#> MLTPL__2[3]="-0.337692327966"/5
#> MLTPL__2[4]="0.0"/5
#> MLTPL__2[5]="0.675384655933"/5
#>>  72
#> GRAD[0]="0.0"/6
#> GRAD[1]="0.0"/6
#> GRAD[2]="-0.196958531376"/6
#> GRAD[3]="0.0"/6
#> GRAD[4]="0.0"/6
#> GRAD[5]="0.196958531376"/6
#>>  73
#>>  74
#> GEO_ITER="4"/8
>>EOF
